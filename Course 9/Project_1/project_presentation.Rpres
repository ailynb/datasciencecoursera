Project: Shiny Application and Reproducible Pitch
========================================================
author: Ailyn
date: 09/01/2018
autosize: true


About the Course Project
========================================================

1. Write a shiny application with associated supporting documentation. The documentation should be thought of as whatever a user will need to get started using your application.
2. Deploy the application on Rstudio's shiny server
3. Share the application link by pasting it into the provided text box
4. Share your server.R and ui.R code on github



How to use the application
========================================================

Using the data provide in "UCI Machine Learning Repository": http://archive.ics.uci.edu/ml/datasets/Wine+Quality, the goal of the project is to predict the quality of wine using some variables to predict with. 


The aplication is running on: https://ailynb.shinyapps.io/course9_project1/


ui.R and server.R Code: https://github.com/ailynb/datasciencecoursera/tree/master/Course%209/Project_1


Wine Quality Data Set 
========================================================

```{r , echo=FALSE}
# Read wine data
while(!exists("wine_red"))
    wine_red <- read.csv2(url("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"),
                          dec = ".")
wine_red$color <- "red"

while(!exists("wine_white"))
    wine_white <- read.csv2(url("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"),
                            dec = ".")
wine_white$color <- "white"

# - Built only a dataframe taking some variables
wine_red <- wine_red[,c("alcohol","pH","density","volatile.acidity","quality","color")]
wine_white <- wine_white[,c("alcohol","pH","density","volatile.acidity","quality","color")]
wine <- rbind(wine_red,wine_white)
wine$taste <- ifelse(wine$quality < 6, 'bad', 'good')
wine$taste[wine$quality == 6] <- 'normal'
wine$taste <- as.factor(wine$taste)
wine$color <- as.factor(wine$color )

# - Quality Histogram
library(plotly)
plot_ly(data = wine, x =~quality, type = "histogram")

# - Summary
summary(wine)

```

Predit "quality" with Regression Tree
========================================================

```{r}
# - Create a series of testing/training partitions 
library(caret)
inTrain <- createDataPartition(wine$quality, p=0.7, list=FALSE)
training <- wine[inTrain,-7]
testing <- wine[-inTrain,]

# - Built a Model and Predict on the testing set
library(rpart) #recursive and partitioning trees
model <- rpart(quality ~. , data = training)
pred <- predict(model, newdata = testing)
MAE(testing$quality, pred)
```

